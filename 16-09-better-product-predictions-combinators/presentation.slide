
# Better timeline estimations

Alexander Baigent
Fluidity Money/Iomete Labs
jobs@fluidity.money
29th September, 2022

## How to make better predictions about product turnaround?

.html ../banners.html

Tough problem! Traditional wisdom states:

1. Onboard more senior decision-makers

: tech leads, ctos, etc, external contractors

2. Guesstimate: break down task, get buyin, adjust deadline

3. Provide loose estimates (8-12 weeks/Q3/etc)

4. Hope for the best! Adjust deadline in practice

: rules of thumb

## Predictions are, majority of the time, wrong

## Experts don't outperform the public reliably

: bit of a reach for me to use this one as an example, but pointing at
: other industries with experts making predictions about the future and
: success of things, you can see that they don't know any better than the
: public majority of the time!

## Project managers use gut estimates that either shoot over or under

: we've all seen this one happen

## What if there were a third way?

- Information markets

- Used by Google and HP! Many studies, but not applied widely

- Self optimising

- Information market quality is value as a trade secret

: since this thing grows over time in quality, an information market
: that's used in an organisation correctly could be kept as a trade secret

- Possible to outsource some decisions to the crowd

- Possible to have automated responses to heuristics

## What are information markets?

- Catch-all term for prediction/idea markets

- People make predictions and are rewarded based on whether the event
came to pass OR how close they are to the others

- A **genetic algorithm** in practice in an organisation

- Distill a complex problem into a very simple "yes" or "no" with
weighting that changes over time incorporating various viewpoints

## The naive approach

- Ask every member of the team once every two weeks for an estimate as
to the remaining timeline on the product via a private poll

- Get their names

- Remember their past answers and assign them an average weighted weight
for future predictions

## Why every team member?

- Not easy to observe the performance of each team member in estimation -
product owner will have distorted view, etc

- Over time, as their histories are remembered, the reliable predictor's
weight will be improved, and so will the overall response

## Pros and cons

- Easy for people to participate

- Simple implementation in practice

- Can be used to underpin other architectures

- Slow and unwieldly in practice (have to organise every X period)

- Synchronous

- Fragmented answers sometimes if the answers are wide

## The weighted beauty pageant approach

: a beauty pageant (or "idea market")

- Market held blindly with blind ballots (why?)

: the market is held blindly so people don't immediately converge on
: consensus

- Participants bet on an outcome

- Are rewarded for how close they are to the weighted consensus of
other traders

- Show users the odds publicly as they bet

## Why not take the naive approach?

- Incentivises information sharing that leads to more informed decisions
(if people take it seriously)

: this is the main thing, though i'd also argue that the previous approach
: leads to fragmented answers practically (without adjusting the format
: of the outreach accordingly)

## Pros and cons

- Better for unclear outcomes that need to converge on a specific answer

- Encourages healthy groupthink

- Can be used to get a gut check and converge on simple answers

- Can be used to discover

## Architecture

Same as before:

1. Have voting period

2. Remember answers

3. Store answers and compute new weights for each user.

## Pros and cons

- Encourage sharing of information privately and publicly (in the
organisation)

- Painful to operate sometimes

- Very weird to operate

## Prediction market fake securities exchange

- Users buy and sell call options in a discrete outcome ("can we launch
by this date?") - payoff of calling the option if the product succeeds
is a reward amount

: no discovery with this one in individual markets - though you could
: build different securities for different outcomes

- Rapid, live update as to odds reflecting all available information

- Similar to actively participating in a market

- Marketmaking the stock exchange for the prediction?

- Room for experimentation that's fully automated

- Zero cost signalling in the UI

: zero cost, instant sentiment signalling

## Prediction markets fake securities exchange

.image https://flickme.xyz/screenshot.jpg 418 640

: for example, imagine other automated traders in the market, imagine
: designating the roles of the traders participating in the system, then
: have automated traders that take contrarian positions in the market
: based on the past performance of each group of programmers divided up

: imagine automated traders in the market that use machine learning distance
: algorithms to estimate the complexity of the code in the codebase,
: and trade accordingly

: imagine algorithms that use the pay of the staff as a factor, and
: their past performanc

: the sky is limitless with the amount of algorithms that could help
: with decisionmaking here - imagine remembering staff performance across
: companies

: imagine, this could even provide the organisation with a tool to
: correct performance in ways that aren't intuitive!!!

: could even provide a way for open source programmers to collect bounties
: based on having it done in a timeline - guarantee they'll have it
: finished by a time - pay a market maker!

## Architecture

This one will take something different...

- Server with state

- Exchange architecture (self balancing trees)

- Websockets?

- Modern web browser

## Architecture

---

: stupid implementation that's functional

	type 'a orders = 'a Order.t list

	type t =
	  { asks : Order.ask orders Map.t
	  ; bids : Order.bid orders Map.t }

(`Map` being a sorted tree - an AVL tree?)

## Building the bot, server and UI

- OCaml

- React

## Implementation of the algorithmic agents

- Trade in separate markets to not detract from the user experience

- During the "fitting" stage of the system are in use to find the
psychological footprint of the team (and to accomodate for noise)

- Of course other factors like Git history, pull request velocity,
number of CI incidents could be used, started out weighted the same as
the rest of the team, then not used if the indicator is not appropriate
due to the randomness

: ie, have a bot that sells down its positions every time a CI indicator
: goes off, would be frustrating to see at first for the team, but the
: next iteration of a market on the platform, would be BTFO'd

## Algorithmic agents hardcoded

- Chosen based on algorithms that attempt to cluster team performance
into categories

: rising to the challenge, junior overzealousness, good sales

- Trade based on past performance of each team member based on open source
code/internal code and similarities to what's in the codebase so far

- Trade based on code similarity to other projects and estimated time

- Trade based on clustering of the projects that are known to the company

- Trade based on natural language processing of the description of the task

Sky's the limit...

## Algorithmic agents (randomly generated programs)

- Taking a page out of the genetic algorithms book

- Each second of the market is a life of a large database of mini programs

- Simple lookup table of states and outcomes

- Emergent complexity of programs tailored to specific teams "DNA"

- Complex programs "breed" with each other upon winning small markets

## Randomly generated programs creation

- Wrote a small program with some simple behaviour

- Shit approach to branching on users (need to find a better strategy here)

---

	type program =
	  | Nop
	  (* junk instruction *)

	  | Wait_iterations of bounded_int
	  | Jump_to_state of state
	  | If_user_is of complex_test
	  (* some "branching" that just halts the behaviour until something comes along *)

	  | Place_ask_at of ask * program if_fail * sentiment option
	  | Place_bid_at of bid * program if_fail * sentiment option
	  | Signal_sentiment of sentiment
	  (* actual execution and signalling *)

Implemetation problems if the amount of participants in the market aren't
capped out - need more instructions to support taking a weight of the
other market participants possibly?

: recursively constructing the algorithmic agents to participate in a
: market might work but isn't something that would be done for reasons
: other than UX

## Algorithmic agents weighting

Over time, these agents could all be used to weigh each other out:

- The noisy company

- The "large batches" engineering organisation

- The reliable team

## Pros and cons

- Interactive

- Actively reflects the state of the project

- Can trace the availability of new information

- Randomness and chaos creates a much more precise prediction

- Have to teach team how to trade on markets

- Need buyin from people who don't understand algorithms

- Unless gamified properly, can be hard to motivate team

- Moral hazard that a trader would attempt to distort results by taking
long time to execute to fit the timeline they're trading on

: it should be noted that in the world of open source and in an ideal
: information landscape with hiring this decision would haunt someone

: i don't think this would be an issue in practice, maybe in a very large
: organisation where the incentives are not properly aligned/there's an
: actual cash incentive to use this system - which would make the market
: extra precise

## Opportunities

- Smaller timeframes, new approaches to budgeting time for a project
to take (staggered launches based on the predictions?)

	- Creates better opportunities for similarity-trading algorithms
	to make predictions

## Towards a precise future

- Experts are mostly wrong at estimation (tech leads anyone?)

- Project managers use their gut instincts

- Prediction markets are a self optimising way of improving estimations
in an organisation

- Three approaches

	- Simple opinion polls

	- "Beauty pageant" with weights

	- Actual market with buying and selling of securities

- Ways to use automated trading bots with the latter to develop emergent
complexity from organisation heuristics/program generation
